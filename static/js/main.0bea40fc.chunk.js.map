{"version":3,"sources":["features/diagnosisKeysSlice.js","features/diagnosisKeys.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchKeys","createAsyncThunk","a","axios","get","response","data","readENALog","payload","filereader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","diagnosisKeysSlice","createSlice","name","initialState","keys","status","enastatus","exposures","extraReducers","pending","state","action","fulfilled","rejected","payload_json","JSON","parse","is_ios","ExposureChecks","map","e","matchCount","MatchCount","matchesCount","hash","Hash","toLowerCase","Buffer","from","toString","keysInFileCount","RandomIDCount","keyCount","timestamp","Timestamp","date","matches","push","count","DiagnosisKeys","dispatch","useDispatch","useSelector","diagnosisKeys","onDrop","useCallback","acceptedFiles","length","useDropzone","getRootProps","getInputProps","useEffect","hashes_and_dates","Object","key","sorted_hashes_and_dates","sort","b","Row","className","Col","Spinner","animation","role","hd","m","App","Container","Navbar","bg","Brand","configureStore","reducer","diagnosisKeysReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bea40fc.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios'\r\n\r\nconst fetchKeys = createAsyncThunk(\r\n  'fetchKeys',\r\n  async () => {\r\n    const response = await axios.get('https://cors-anywhere.herokuapp.com/https://ctt.pfstr.de/json/filehashes.json')\r\n    return response.data\r\n  }\r\n)\r\n\r\nconst readENALog = createAsyncThunk(\r\n  'readENALog',\r\n  async payload => {\r\n    const filereader = new FileReader()\r\n\r\n    return new Promise( (resolve, reject) => {\r\n      filereader.onerror = () => {\r\n        filereader.abort()\r\n        reject(new DOMException(\"Error parsing input file.\"))\r\n      }\r\n      filereader.onload = () => {\r\n        resolve(filereader.result)\r\n      }\r\n      filereader.readAsText(payload)\r\n    })\r\n  }\r\n)\r\n\r\nexport const diagnosisKeysSlice = createSlice({\r\n  name: 'diagnosisKeys',\r\n  initialState: {\r\n    keys: [],\r\n    status: 'uninitialized',\r\n    enastatus: 'uninitialized',\r\n    exposures: {}\r\n  },\r\n  extraReducers: {\r\n    [fetchKeys.pending]: (state, action) => { state.status = 'loading' },\r\n    [fetchKeys.fulfilled]: (state, action) => {\r\n      state.status = 'loaded'\r\n      state.keys = action.payload\r\n    },\r\n    [fetchKeys.rejected]: (state, action) => { state.status = 'error' },\r\n    [readENALog.pending]: (state, action) => { state.enastatus = 'loading' },\r\n    [readENALog.fulfilled]: (state, action) => {\r\n      const payload_json = JSON.parse(action.payload)\r\n      const is_ios = 'DeviceProductType' in payload_json\r\n      const exposures = is_ios ? payload_json.ExposureChecks : payload_json\r\n      exposures.map( e => {\r\n        const matchCount = is_ios ? e.MatchCount : e.matchesCount\r\n        if (matchCount > 0) {\r\n          const hash = is_ios ? e.Hash.toLowerCase() : Buffer.from(e.hash, 'base64').toString('hex').toLowerCase()\r\n          const keysInFileCount = is_ios ? e.RandomIDCount : e.keyCount\r\n          const timestamp = is_ios ? e.Timestamp : e.timestamp\r\n          if( !(hash in state.exposures) ) {\r\n            state.exposures[hash] = {date: state.keys[hash], keysInFileCount: keysInFileCount, matches: []}\r\n          }\r\n          state.exposures[hash].matches.push({timestamp: timestamp, count: matchCount})\r\n        }\r\n      })\r\n      state.enastatus = 'loaded'\r\n    },\r\n    [readENALog.rejected]: (state, action) => { state.enastatus = 'error' },\r\n  }\r\n})\r\n\r\nexport { fetchKeys, readENALog }\r\nexport default diagnosisKeysSlice.reducer\r\n","import React, { useEffect, useCallback, useRef } from 'react'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchKeys, readENALog } from './diagnosisKeysSlice'\nimport { useDropzone } from 'react-dropzone'\nimport '../App.css';\n\nconst DiagnosisKeys = () => {\n\n    const dispatch = useDispatch()\n    const status = useSelector(state => state.diagnosisKeys.status)\n    const enastatus = useSelector(state => state.diagnosisKeys.enastatus)\n    const exposures = useSelector(state => state.diagnosisKeys.exposures)\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (enastatus==='uninitialized' && acceptedFiles.length === 1) {\n            dispatch(readENALog(acceptedFiles[0]))\n        }\n    }, [dispatch, enastatus])\n\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    useEffect( () => {\n        dispatch(fetchKeys())\n    }, [dispatch])\n\n    const hashes_and_dates = []\n    Object.keys(exposures).map( key => {\n        hashes_and_dates.push([key, exposures[key].date])\n    })\n    const sorted_hashes_and_dates = hashes_and_dates.sort( (a,b) => {return a[1] > b[1] ? 1 : -1})\n\n    if (status === 'loading' || status === 'uninitialized') {\n        return (\n            <Row className='mainRow'>\n                <Col>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Lade DiagnoseschlÃ¼ssel...</span>\n                    </Spinner>\n                </Col>\n            </Row>\n        )\n    }\n    else if (status === 'error') {\n        return (\n            <Row className='mainRow'>\n                <Col>\n                    <p>Ein Fehler ist beim Laden der DiagnoseschlÃ¼sselinformationen aufgetreten.</p>\n                </Col>\n            </Row>\n        )\n    }\n    else {\n        return (\n            <Row className='mainRow'>\n                <Col>\n                    {enastatus === 'uninitialized' &&\n                        <div {...getRootProps({ className: 'dropzone' })}>\n                            <input {...getInputProps()} />\n                                <p>Um Begegnungsdateien zu analysieren, klicken oder ziehen.</p>\n                        </div>\n                    }\n                    {enastatus === 'loading' &&\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Lade Begegnungslog...</span>\n                        </Spinner>\n                    }\n                    { enastatus === 'loaded' && sorted_hashes_and_dates.length === 0 &&\n                        <p>Es sind keine Begegnungen mit positiv getester Person in der Log-Datei gespeichert.</p>\n                    }\n                    { enastatus === 'loaded' && sorted_hashes_and_dates.length > 0 &&\n                        sorted_hashes_and_dates.map( hd => {\n                            const hash = hd[0]\n                            const date = hd[1]\n                            return (\n                                <div>\n                                    <Row className='mt-4'>\n                                        <Col>SchlÃ¼sseldatei vom {date} mit {exposures[hash].keysInFileCount} SchlÃ¼sseln:</Col>\n                                    </Row>\n                                    {\n                                        exposures[hash].matches.map( m => {\n                                            return (\n                                                <Row>\n                                                    <Col className='ml-5'>{m.count} {m.count == 1 ? 'Begegnung' : 'Begegnungen'} bei ÃberprÃ¼fung am {m.timestamp}</Col>\n                                                </Row>\n                                            )\n                                        })\n                                    }\n                                </div>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n        )\n    }\n}\n\nexport default DiagnosisKeys","import React from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport DiagnosisKeys from './features/diagnosisKeys'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <Navbar bg=\"light\">\r\n        <Navbar.Brand>Corona Exposure Notification Log Analysis</Navbar.Brand>\r\n      </Navbar>\r\n      <DiagnosisKeys />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport diagnosisKeysReducer from '../features/diagnosisKeysSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    diagnosisKeys: diagnosisKeysReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}