{"version":3,"sources":["features/diagnosisKeysSlice.js","features/diagnosisKeys.js","features/info.js","App.js","app/store.js","index.js"],"names":["DateTime","require","fetchKeys","createAsyncThunk","a","axios","get","response","data","readENALog","payload","filereader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","diagnosisKeysSlice","createSlice","name","initialState","keys","status","enastatus","exposures","reducers","resetENA","state","action","extraReducers","pending","fulfilled","rejected","payload_json","JSON","parse","is_ios","ExposureChecks","filtered_exposures","map","e","MatchCount","matchesCount","hash","Hash","toLowerCase","Buffer","from","toString","keysInFileCount","RandomIDCount","keyCount","date","matches","matchCount","timestamp","fromFormat","Timestamp","toISO","push","count","Object","entries","exp","sort","b","actions","DiagnosisKeys","dispatch","useDispatch","useSelector","diagnosisKeys","onDrop","useCallback","acceptedFiles","length","useDropzone","getRootProps","getInputProps","useEffect","hashes_and_dates","key","sorted_hashes_and_dates","Row","className","Col","Spinner","animation","role","hd","fromISO","toLocaleString","DATE_MED_WITH_WEEKDAY","Card","Header","Body","Table","striped","bordered","size","m","checkDate","DATETIME_SHORT","dummy_exposures","formatted_dummy_exposures","faq_entries","href","target","Info","Accordion","i","Toggle","as","eventKey","title","Collapse","content","App","useState","naviState","setNaviState","activateNaviItem","item","s","reduce","acc","cur","Container","Navbar","bg","expand","Brand","aria-controls","id","Nav","Link","onClick","home","info","configureStore","reducer","diagnosisKeysReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.dd825c39.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios'\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nconst fetchKeys = createAsyncThunk(\r\n  'fetchKeys',\r\n  async () => {\r\n    const response = await axios.get('https://ctt.pfstr.de/json/filehashes.json')\r\n    return response.data\r\n  }\r\n)\r\n\r\nconst readENALog = createAsyncThunk(\r\n  'readENALog',\r\n  async payload => {\r\n    const filereader = new FileReader()\r\n\r\n    return new Promise( (resolve, reject) => {\r\n      filereader.onerror = () => {\r\n        filereader.abort()\r\n        reject(new DOMException(\"Error parsing input file.\"))\r\n      }\r\n      filereader.onload = () => {\r\n        resolve(filereader.result)\r\n      }\r\n      filereader.readAsText(payload)\r\n    })\r\n  }\r\n)\r\n\r\nexport const diagnosisKeysSlice = createSlice({\r\n  name: 'diagnosisKeys',\r\n  initialState: {\r\n    keys: {},\r\n    status: 'uninitialized',\r\n    enastatus: 'uninitialized',\r\n    exposures: {}\r\n  },\r\n  reducers: {\r\n    resetENA(state, action) {\r\n      state.exposures = {}\r\n      state.enastatus = 'uninitialized'\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [fetchKeys.pending]: (state, action) => { state.status = 'loading' },\r\n    [fetchKeys.fulfilled]: (state, action) => {\r\n      state.status = 'loaded'\r\n      state.keys = action.payload\r\n    },\r\n    [fetchKeys.rejected]: (state, action) => { state.status = 'error' },\r\n    [readENALog.pending]: (state, action) => { state.enastatus = 'loading' },\r\n    [readENALog.fulfilled]: (state, action) => {\r\n      const payload_json = JSON.parse(action.payload)\r\n      const is_ios = 'DeviceProductType' in payload_json\r\n      const exposures = is_ios ? payload_json.ExposureChecks : payload_json\r\n      const filtered_exposures = {}\r\n      // loop twice through exposure: first time to get all hashes, second time to get all matches\r\n      // rationale: also report 0 matches for a file where matches have been reported at another check instance\r\n      exposures.map( e => {\r\n        const matchCount = is_ios ? e.MatchCount : e.matchesCount\r\n        if (matchCount > 0) {\r\n          const hash = is_ios ? e.Hash.toLowerCase() : Buffer.from(e.hash, 'base64').toString('hex').toLowerCase()\r\n          if( !(hash in filtered_exposures) ) {\r\n            const keysInFileCount = is_ios ? e.RandomIDCount : e.keyCount\r\n            filtered_exposures[hash] = {date: state.keys[hash], keysInFileCount: keysInFileCount, matches: []}\r\n          }\r\n        }\r\n      })\r\n      exposures.map( e => {\r\n        const matchCount = is_ios ? e.MatchCount : e.matchesCount\r\n        const hash = is_ios ? e.Hash.toLowerCase() : Buffer.from(e.hash, 'base64').toString('hex').toLowerCase()\r\n        if (matchCount > 0 || hash in filtered_exposures) {\r\n          const timestamp = is_ios ? DateTime.fromFormat(e.Timestamp, \"yyyy-MM-dd HH:mm:ss ZZZ\").toISO() : DateTime.fromFormat(e.timestamp, \"dd. LLLL yyyy, HH:mm\").toISO()\r\n          filtered_exposures[hash].matches.push({timestamp: timestamp, count: matchCount})\r\n        }\r\n      })\r\n      Object.entries(filtered_exposures).map( ([hash, exp]) => {\r\n        exp.matches = exp.matches.sort( (a,b) => {return a.timestamp > b.timestamp ? 1 : -1})\r\n        state.exposures[hash] = exp\r\n      })\r\n      state.enastatus = 'loaded'\r\n    },\r\n    [readENALog.rejected]: (state, action) => { state.enastatus = 'error' },\r\n  }\r\n})\r\n\r\nconst { resetENA } = diagnosisKeysSlice.actions\r\nexport { fetchKeys, readENALog, resetENA }\r\nexport default diagnosisKeysSlice.reducer\r\n","import React, { useEffect, useCallback } from 'react'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Table from 'react-bootstrap/Table'\nimport Card from 'react-bootstrap/Card'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchKeys, readENALog } from './diagnosisKeysSlice'\nimport { useDropzone } from 'react-dropzone'\nimport '../App.css'\nconst { DateTime } = require(\"luxon\");\n\nconst DiagnosisKeys = () => {\n\n    const dispatch = useDispatch()\n    const status = useSelector(state => state.diagnosisKeys.status)\n    const enastatus = useSelector(state => state.diagnosisKeys.enastatus)\n    const exposures = useSelector(state => state.diagnosisKeys.exposures)\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (enastatus==='uninitialized' && acceptedFiles.length === 1) {\n            dispatch(readENALog(acceptedFiles[0]))\n        }\n    }, [dispatch, enastatus])\n\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    useEffect( () => {\n        dispatch(fetchKeys())\n    }, [dispatch])\n\n    const hashes_and_dates = []\n    Object.keys(exposures).map( key => {\n        hashes_and_dates.push([key, exposures[key].date])\n    })\n    const sorted_hashes_and_dates = hashes_and_dates.sort( (a,b) => {return a[1] > b[1] ? 1 : -1})\n\n    if (status === 'loading' || status === 'uninitialized') {\n        return (\n            <Row className=\"mt-2\">\n                <Col>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Lade Diagnoseschlüssel...</span>\n                    </Spinner>\n                </Col>\n            </Row>\n        )\n    }\n    else if (status === 'error') {\n        return (\n            <Row className=\"mt-2\">\n                <Col>\n                    <p>Beim Laden der Diagnoseschlüsselinformationen ist ein Fehler aufgetreten.</p>\n                </Col>\n            </Row>\n        )\n    }\n    else {\n        return (\n            <Row className=\"mt-2\">\n                <Col>\n                    {enastatus === 'uninitialized' &&\n                        <div {...getRootProps({ className: 'dropzone' })}>\n                            <input {...getInputProps()} />\n                                <p>Um Begegnungsüberprüfungsdatei zu analysieren, klicken oder ziehen.</p>\n                        </div>\n                    }\n                    {enastatus === 'loading' &&\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Lade Begegnungsüberprüfungsdatei</span>\n                        </Spinner>\n                    }\n                    { enastatus === 'error' &&\n                        <p>Beim Laden der Begegnungsüberprüfungen ist ein Fehler aufgetreten.</p>\n                    }\n                    { enastatus === 'loaded' && sorted_hashes_and_dates.length === 0 &&\n                        <p>Bei Begegnungsüberprüfungen wurden keine Treffer mit positiv getester Person gefunden.</p>\n                    }\n                    { enastatus === 'loaded' && sorted_hashes_and_dates.length > 0 &&\n                        sorted_hashes_and_dates.map( hd => {\n                            const hash = hd[0]\n                            const date = DateTime.fromISO(hd[1]).toLocaleString(DateTime.DATE_MED_WITH_WEEKDAY)\n                            return (\n                                <Card className=\"mb-2\">\n                                    <Card.Header>\n                                        Schlüsseldatei vom {date} mit {exposures[hash].keysInFileCount} Schlüsseln\n                                    </Card.Header>\n                                    <Card.Body>\n                                        <Table striped bordered size=\"sm\">\n                                            <thead>\n                                                <th>Anzahl Treffer</th>\n                                                <th>Überprüfungszeitpunkt</th>\n                                            </thead>\n                                            <tbody>\n                                                {\n                                                    exposures[hash].matches.map( m => {\n                                                        const checkDate = DateTime.fromISO(m.timestamp).toLocaleString(DateTime.DATETIME_SHORT)\n                                                        return (\n                                                            <tr>\n                                                                <td>{m.count}</td>\n                                                                <td>{checkDate}</td>\n                                                            </tr>\n                                                        )\n                                                    })\n                                                }\n                                            </tbody>\n                                        </Table>\n                                    </Card.Body>\n                                </Card>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n        )\n    }\n}\n\nexport default DiagnosisKeys","import React, { useEffect, useCallback } from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Table from 'react-bootstrap/Table'\nimport '../App.css'\nconst { DateTime } = require(\"luxon\");\n\nconst dummy_exposures = { \"181702660f5033305b36e34f014322d1d76ec86cf378eaf1f6e36aadd8892d89\":\n    {\n        \"date\": \"2020-08-15\",\n        \"keysInFileCount\": 2675,\n        \"matches\": [{ \"timestamp\": \"2020-08-17T06:36:33.000+02:00\", \"count\": 1 },\n                    { \"timestamp\": \"2020-08-18T06:42:59.000+02:00\", \"count\": 1 },\n                    { \"timestamp\": \"2020-08-19T08:25:18.000+02:00\", \"count\": 1 },\n                    { \"timestamp\": \"2020-08-20T13:43:36.000+02:00\", \"count\": 1 },\n                    { \"timestamp\": \"2020-08-21T13:59:18.000+02:00\", \"count\": 1 },\n                    { \"timestamp\": \"2020-08-22T14:50:07.000+02:00\", \"count\": 1 },\n                    { \"timestamp\": \"2020-08-23T16:14:08.000+02:00\", \"count\": 0 }]\n    }}\n\nconst formatted_dummy_exposures = Object.keys(dummy_exposures).map( hash => {\n        const date = DateTime.fromISO(dummy_exposures[hash].date).toLocaleString(DateTime.DATE_MED_WITH_WEEKDAY)\n        return (\n            <div>\n                <Card className=\"mb-2\">\n                    <Card.Header>\n                        Schlüsseldatei vom {date} mit {dummy_exposures[hash].keysInFileCount} Schlüsseln\n                    </Card.Header>\n                    <Card.Body>\n                        <Table className='mt-2' striped bordered size=\"sm\">\n                            <thead>\n                                <th>Anzahl Treffer</th>\n                                <th>Überprüfungszeitpunkt</th>\n                            </thead>\n                            <tbody>\n                                {\n                                    dummy_exposures[hash].matches.map( m => {\n                                        const checkDate = DateTime.fromISO(m.timestamp).toLocaleString(DateTime.DATETIME_SHORT)\n                                        return (\n                                            <tr>\n                                                <td>{m.count}</td>\n                                                <td>{checkDate}</td>\n                                            </tr>\n                                        )\n                                    })\n                                }\n                            </tbody>\n                        </Table>\n                    </Card.Body>\n                </Card>\n            </div>\n        )\n    })\n\nconst faq_entries = [\n    {\n        'title': 'Wo findet sich die Begegnungsüberprüfungsdatei?',\n        'content': <div><h4>Bei iOS Geräten</h4>\n            <ul>\n                <li>Einstellungen</li>\n                <li>Datenschutz</li>\n                <li>Health</li>\n                <li>COVID 19 Begegnungsaufzeichnungen</li>\n                <li>Begegnungsüberprüfungen</li>\n                <li>Mit PIN oder FaceID authentifizieren</li>\n                <li>ganz nach unten scrollen</li>\n                <li>Begegnungsüberprüfungen exportieren</li>\n            </ul>\n            <h4>Bei Android Geräten</h4>\n            <ul>\n                <li>Einstellungen</li>\n                <li>Google</li>\n                <li>COVID19-Benachrichtigungen</li>\n                <li>Überprüfung auf mögliche Begegnungen</li>\n                <li>Authentifizieren Sie sich</li>\n                <li>Exportieren</li>\n            </ul>\n        </div>\n    },\n    {\n        'title': 'Was bedeutet die Begegnungsüberprüfung?',\n        'content': <div>Bei der Begegnungsüberprüfung wird periodisch verglichen, ob eine Begegnung mit einer als positiv getesten Person stattgefunden hat. <br/>\n            <Card>\n                <Card.Header>Beispiel</Card.Header>\n                <Card.Body>\n                    {formatted_dummy_exposures}\n                    <ul>\n                        <li>Bei Überprüfung am 17.-22.8 wurde jeweils eine Begegnung mit einer positiv getesteten Person festgestellt, deren Schlüssel in der Schlüsseldatei vom 15.8. enthalten ist.</li>\n                        <li>Am 23.8. wurde keine Begegnung mehr festgestellt. Da das Smartphone Begegnungsinformationen für 14 Tage speichert und danach löscht, war die Begegnung vermutlich am 8.8. (8 = 22 - 14, 22: Tag des letzten Treffer).</li>\n                        <li>Da der Schlüssel in der Schlüsseldatei vom 15.8. enthalten ist, hat die Person ihr positives Ergebnis vermutlich am 14.8. in die App eingetragen.</li>\n                    </ul>\n                </Card.Body>\n            </Card>\n\n            </div>\n    },\n    {\n        'title': 'Die Corona-Warn-App zeigt Risiko-Begegnungen mit niedrigem Risiko. Kann ich herausfinden, wann diese gewesen sind?',\n        'content': <div>\n            Dies ist aktuell leider nicht möglich. Wie oben bei \"Was bedeutet Begegnungsüberprüfung?\" dargestellt, können aber Schätzungen anhand der Begegnungsüberprüfungsdaten abgeleitet werden. <br/>\n            Im Backlog der Corona-Warn-App wird eine Erweiterung der App um die Bereitstellung dieser Informationen <a href=\"https://github.com/corona-warn-app/cwa-backlog/issues/23\" target=\"_blank\">diskutiert</a>.\n        </div>\n    },\n    {\n        'title': 'Weitere Informationen',\n        'content': <ul>\n            <li><a href=\"https://www.coronawarn.app/de/faq/\" target=\"_blank\">FAQ</a> zur Corona-Warn-App.</li>\n            <li><a href=\"https://ctt.pfstr.de/\" target=\"_blank\">Dashboard</a> zur Nutzung der Corona-Warn-App von Jan Pfister.</li>\n            <li><a href=\"https://micb25.github.io/dka/\" target=\"_blank\">Dashboard</a> zur Nutzung der Corona-Warn-App von Michael Böhme.</li>\n            <li><a href=\"https://github.com/mh-/diagnosis-keys/\" target=\"_blank\">Tool</a> zur Analyse der Diagnoseschlüsseldateien von Michael Hübler.</li>\n        </ul>\n    },\n    {\n        'title': 'Werden die Bewegungsüberprüfungsdaten bei der Analyse gespeichert oder auf fremde Server transferiert?', \n        'content': 'Die Analyse der Bewegungsüberprüfugnsdateien findet im Browser des ausführenden Geräts statt, es werden keine Bewegungsüberprüfungsdateien mit fremden Servern ausgetauscht. Die Seite setzt auf einen datensparsamen Ansatz und nutzt keine Cookies.'\n    },\n    {\n        'title': 'Über diese Seite',\n        'content': <div>\n                Der Quelltext dieser Applikation findet sich auf <a href=\"https://github.com/felixlen/ena_log\" target=\"_blank\">GitHub</a> unter MIT-Lizenz.<br />\n                Herzlichen Dank an <a href=\"https://pfstr.de\" target=\"_blank\">Jan Pfister</a> für das Bereitstellen der Datenschlüsseldatei.<br />\n                (c) 2020 <a href=\"https://www.felixlenders.de\" target=\"_blank\">Felix Lenders</a>.\n            </div>\n    },\n]\n\nconst Info = () => {\n    return (\n        <Row className=\"mt-2\">\n            <Col>\n                <Accordion>\n                {faq_entries.map( (e, i) => {\n                    return (\n                        <Card key={i}>\n                            <Accordion.Toggle as={Card.Header} eventKey={i.toString()}>\n                                {e.title}\n                            </Accordion.Toggle>\n                            <Accordion.Collapse eventKey={i.toString()}>\n                                <Card.Body>\n                                    {e.content}\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    )\n                })}\n                </Accordion>\n            </Col>\n        </Row>\n    )\n}\n\nexport default Info","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport DiagnosisKeys from './features/diagnosisKeys'\r\nimport Info from './features/info'\r\nimport { resetENA } from './features/diagnosisKeysSlice'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const enastatus = useSelector(state => state.diagnosisKeys.enastatus)\r\n\r\n  const [naviState, setNaviState] = useState({\r\n    'home': true,\r\n    'info': false\r\n  })\r\n\r\n  const activateNaviItem = item => {\r\n    setNaviState(s => (Object.entries(s).reduce((acc, cur) => ({...acc, [cur[0]]: cur[0]===item}), {})))\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand>CWA Begegnungsüberprüfungen</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link onClick={() => activateNaviItem('home')}>Home</Nav.Link>\r\n            <Nav.Link onClick={() => activateNaviItem('info')}>Information</Nav.Link>\r\n            { enastatus !== 'uninitialized' && <Nav.Link onClick={() => dispatch(resetENA())}>Zurücksetzen</Nav.Link> }\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      { naviState.home && <DiagnosisKeys /> }\r\n      { naviState.info && <Info /> }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport diagnosisKeysReducer from '../features/diagnosisKeysSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    diagnosisKeys: diagnosisKeysReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}