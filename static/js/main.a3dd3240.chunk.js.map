{"version":3,"sources":["features/diagnosisKeysSlice.js","features/diagnosisKeys.js","App.js","app/store.js","index.js"],"names":["fetchKeys","createAsyncThunk","a","axios","get","response","data","readENALog","payload","filereader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","diagnosisKeysSlice","createSlice","name","initialState","keys","status","enastatus","exposures","extraReducers","pending","state","action","fulfilled","rejected","payload_json","JSON","parse","is_ios","ExposureChecks","map","e","MatchCount","matchesCount","hash","Hash","toLowerCase","Buffer","from","toString","keysInFileCount","RandomIDCount","keyCount","date","matches","matchCount","timestamp","Timestamp","push","count","DiagnosisKeys","dispatch","useDispatch","useSelector","diagnosisKeys","onDrop","useCallback","acceptedFiles","length","useDropzone","getRootProps","getInputProps","useEffect","hashes_and_dates","Object","key","sorted_hashes_and_dates","sort","b","Row","className","Col","Spinner","animation","role","hd","Table","striped","bordered","size","m","App","Container","Navbar","bg","Brand","configureStore","reducer","diagnosisKeysReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.a3dd3240.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios'\r\n\r\nconst fetchKeys = createAsyncThunk(\r\n  'fetchKeys',\r\n  async () => {\r\n    const response = await axios.get('https://cors-anywhere.herokuapp.com/https://ctt.pfstr.de/json/filehashes.json')\r\n    return response.data\r\n  }\r\n)\r\n\r\nconst readENALog = createAsyncThunk(\r\n  'readENALog',\r\n  async payload => {\r\n    const filereader = new FileReader()\r\n\r\n    return new Promise( (resolve, reject) => {\r\n      filereader.onerror = () => {\r\n        filereader.abort()\r\n        reject(new DOMException(\"Error parsing input file.\"))\r\n      }\r\n      filereader.onload = () => {\r\n        resolve(filereader.result)\r\n      }\r\n      filereader.readAsText(payload)\r\n    })\r\n  }\r\n)\r\n\r\nexport const diagnosisKeysSlice = createSlice({\r\n  name: 'diagnosisKeys',\r\n  initialState: {\r\n    keys: [],\r\n    status: 'uninitialized',\r\n    enastatus: 'uninitialized',\r\n    exposures: {}\r\n  },\r\n  extraReducers: {\r\n    [fetchKeys.pending]: (state, action) => { state.status = 'loading' },\r\n    [fetchKeys.fulfilled]: (state, action) => {\r\n      state.status = 'loaded'\r\n      state.keys = action.payload\r\n    },\r\n    [fetchKeys.rejected]: (state, action) => { state.status = 'error' },\r\n    [readENALog.pending]: (state, action) => { state.enastatus = 'loading' },\r\n    [readENALog.fulfilled]: (state, action) => {\r\n      const payload_json = JSON.parse(action.payload)\r\n      const is_ios = 'DeviceProductType' in payload_json\r\n      const exposures = is_ios ? payload_json.ExposureChecks : payload_json\r\n      // loop twice through exposure: first time to get all hashes, second time to get all matches\r\n      // rationale: also report 0 matches for a file where matches have been reported at another check instance\r\n      exposures.map( e => {\r\n        const matchCount = is_ios ? e.MatchCount : e.matchesCount\r\n        if (matchCount > 0) {\r\n          const hash = is_ios ? e.Hash.toLowerCase() : Buffer.from(e.hash, 'base64').toString('hex').toLowerCase()\r\n          if( !(hash in state.exposures) ) {\r\n            const keysInFileCount = is_ios ? e.RandomIDCount : e.keyCount\r\n            state.exposures[hash] = {date: state.keys[hash], keysInFileCount: keysInFileCount, matches: []}\r\n          }\r\n        }\r\n      })\r\n      exposures.map( e => {\r\n        const matchCount = is_ios ? e.MatchCount : e.matchesCount\r\n        const hash = is_ios ? e.Hash.toLowerCase() : Buffer.from(e.hash, 'base64').toString('hex').toLowerCase()\r\n        if (matchCount > 0 || hash in state.exposures) {\r\n          const timestamp = is_ios ? e.Timestamp : e.timestamp\r\n          state.exposures[hash].matches.push({timestamp: timestamp, count: matchCount})\r\n        }\r\n      })\r\n      state.enastatus = 'loaded'\r\n    },\r\n    [readENALog.rejected]: (state, action) => { state.enastatus = 'error' },\r\n  }\r\n})\r\n\r\nexport { fetchKeys, readENALog }\r\nexport default diagnosisKeysSlice.reducer\r\n","import React, { useEffect, useCallback } from 'react'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Table from 'react-bootstrap/Table'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchKeys, readENALog } from './diagnosisKeysSlice'\nimport { useDropzone } from 'react-dropzone'\nimport '../App.css';\n\nconst DiagnosisKeys = () => {\n\n    const dispatch = useDispatch()\n    const status = useSelector(state => state.diagnosisKeys.status)\n    const enastatus = useSelector(state => state.diagnosisKeys.enastatus)\n    const exposures = useSelector(state => state.diagnosisKeys.exposures)\n\n    const onDrop = useCallback(acceptedFiles => {\n        if (enastatus==='uninitialized' && acceptedFiles.length === 1) {\n            dispatch(readENALog(acceptedFiles[0]))\n        }\n    }, [dispatch, enastatus])\n\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    useEffect( () => {\n        dispatch(fetchKeys())\n    }, [dispatch])\n\n    const hashes_and_dates = []\n    Object.keys(exposures).map( key => {\n        hashes_and_dates.push([key, exposures[key].date])\n    })\n    const sorted_hashes_and_dates = hashes_and_dates.sort( (a,b) => {return a[1] > b[1] ? 1 : -1})\n\n    if (status === 'loading' || status === 'uninitialized') {\n        return (\n            <Row className='mainRow'>\n                <Col>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Lade Diagnoseschlüssel...</span>\n                    </Spinner>\n                </Col>\n            </Row>\n        )\n    }\n    else if (status === 'error') {\n        return (\n            <Row className='mainRow'>\n                <Col>\n                    <p>Ein Fehler ist beim Laden der Diagnoseschlüsselinformationen aufgetreten.</p>\n                </Col>\n            </Row>\n        )\n    }\n    else {\n        return (\n            <Row className='mainRow'>\n                <Col>\n                    {enastatus === 'uninitialized' &&\n                        <div {...getRootProps({ className: 'dropzone' })}>\n                            <input {...getInputProps()} />\n                                <p>Um Begegnungsdateien zu analysieren, klicken oder ziehen.</p>\n                        </div>\n                    }\n                    {enastatus === 'loading' &&\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Lade Begegnungslog...</span>\n                        </Spinner>\n                    }\n                    { enastatus === 'loaded' && sorted_hashes_and_dates.length === 0 &&\n                        <p>Es sind keine Begegnungen mit positiv getester Person in der Log-Datei gespeichert.</p>\n                    }\n                    { enastatus === 'loaded' && sorted_hashes_and_dates.length > 0 &&\n                        sorted_hashes_and_dates.map( hd => {\n                            const hash = hd[0]\n                            const date = hd[1]\n                            return (\n                                <div>\n                                    <Row className='mt-4'>\n                                        <Col>Schlüsseldatei vom {date} mit {exposures[hash].keysInFileCount} Schlüsseln:</Col>\n                                    </Row>\n                                    <Table className='ml-4 mt-2' striped bordered size=\"sm\">\n                                        <thead>\n                                            <th>Anzahl Treffer</th>\n                                            <th>Überprüfungszeitpunkt</th>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                exposures[hash].matches.map( m => {\n                                                    return (\n                                                        <tr>\n                                                            <td>{m.count}</td>\n                                                            <td>{m.timestamp}</td>\n                                                        </tr>\n                                                    )\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                </div>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n        )\n    }\n}\n\nexport default DiagnosisKeys","import React from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport DiagnosisKeys from './features/diagnosisKeys'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <Navbar bg=\"light\">\r\n        <Navbar.Brand>Corona Exposure Notification Log Analysis</Navbar.Brand>\r\n      </Navbar>\r\n      <DiagnosisKeys />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport diagnosisKeysReducer from '../features/diagnosisKeysSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    diagnosisKeys: diagnosisKeysReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}